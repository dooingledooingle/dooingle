name: frontend deployment # 프론트엔드 코드 배포 - secrets.VITE_PRODUCTION_ENV 내용은 AWS EC2 dev 서버 관련 환경 변수
on:
  push:
    branches:
      - frontend/dev
      - add/frontend-with-dev-server-deployment
jobs:
  frontend-deployment:
    runs-on: ubuntu-latest
    # 이 workflow에서 VERCEL_TOKEN, VERCEL_ORG_ID를 직접 지시하지는 않는데, env로 둬야 Vercel에서 읽어서 배포 가능한 듯함
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    steps:
      # (1) 체크아웃
      - name: Checkout
        uses: actions/checkout@v4.1.1

      # (2) .env 파일 작성 - secrets.VITE_PRODUCTION_ENV 내용은 AWS EC2 관련 환경 변수
      - name: Make VITE .env file
        run: touch ./dooingle-front/.env \
          && echo "${{ secrets.VITE_PRODUCTION_ENV }}" > ./dooingle-front/.env

      # (3) Vercel CLI 설치
      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      # (4) Vercel production 환경 관련 정보를 가져옴
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=$VERCEL_TOKEN

      # (5) Vercel CLI를 통한 빌드 - 이 때 Vite를 알아서 사용함
      - name: Build Project Artifacts
        run: vercel build --prod --token=$VERCEL_TOKEN

      # (6) Vercel에 배포
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=$VERCEL_TOKEN

  frontend-dev-deployment:
    runs-on: ubuntu-latest
    # 이 workflow에서 VERCEL_TOKEN, VERCEL_ORG_ID를 직접 지시하지는 않는데, env로 둬야 Vercel에서 읽어서 배포 가능한 듯함
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN_DEV }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID_DEV }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_DEV }}
    steps:
      # (1) 체크아웃
      - name: Checkout
        uses: actions/checkout@v4.1.1

      # (2) .env 파일 작성 - secrets.VITE_PRODUCTION_ENV 내용은 AWS EC2 관련 환경 변수
      - name: Make VITE .env file
        run: touch ./dooingle-front/.env \
          && echo "${{ secrets.VITE_DEV_ENV }}" > ./dooingle-front/.env

      # (3) Vercel CLI 설치
      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      # (4) Vercel production 환경 관련 정보를 가져옴
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=$VERCEL_TOKEN

      # (5) Vercel CLI를 통한 빌드 - 이 때 Vite를 알아서 사용함
      - name: Build Project Artifacts
        run: vercel build --prod --token=$VERCEL_TOKEN

      # (6) Vercel에 배포
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=$VERCEL_TOKEN
